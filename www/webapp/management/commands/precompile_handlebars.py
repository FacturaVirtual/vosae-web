# -*- coding:Utf-8 -*-

import os
from subprocess import call
import shutil

from templatetag_handlebars.templatetags.templatetag_handlebars import HandlebarsNode

from django.core.management.base import BaseCommand
from django.utils.translation import activate, deactivate, get_language
from django.template import Context, Template
from django.conf import settings


class Command(BaseCommand):

    """A management command which precompile handlebars templates."""
    help = 'Precompile handlebars templates.'

    def handle(self, *args, **kwargs):

        def make_files(self, context):

            output = super(HandlebarsNode, self).render(context)
            attrs = []

            # Overwrite the STATIC_URL on pre-compilation to have the right URL once deployed
            try:
                settings.STATIC_URL = settings.STATIC_URL_ONCE_DEPLOYED
                settings.STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
            except:
                print "Use the S3 bucket URL for handlebars pre-compilation"

            if self.template_id:
                attrs.append('id=%s' % self.template_id)
            if self.template_name:
                handlebars_path = str(self.template_name)[1:-1].split('/')
                handlebars_file = handlebars_path.pop()
                handlebars_folders = settings.SITE_ROOT + "/webapp/static/webapp/handlebars/" + get_language() + '/' + "/".join(handlebars_path)

                attrs.append('data-template-name=%s' % self.template_name)

                # make folders
                if not os.path.exists(handlebars_folders):
                    os.makedirs(handlebars_folders)
                # write handlebars templates
                f = open(handlebars_folders + '/' + handlebars_file + '.handlebars', 'w')
                f.write(output.encode('utf-8'))
                f.close()

            for arg, val in self.extended_args.items():
                attrs.append('%s=%s' % (arg, val))
            return """<script %s type="text/x-handlebars">%s</script>""" % (' '.join(attrs), output)

        # Monkey patch the django templatetag for handlebar
        HandlebarsNode.render = make_files

        # Execute for each LANGUAGE
        for lang, lang_name in settings.LANGUAGES:
            activate(lang)
            Template('{% include "webapp/handlebars-imports.html" %}').render(Context({}))
            call(["grunt", "handlebars", "--lang=" + lang])
            deactivate()

        # Remove handlebars files previously generated by Django
        shutil.rmtree(settings.SITE_ROOT + "/webapp/static/webapp/handlebars/")
